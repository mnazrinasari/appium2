name: Maven Build and Test

# Trigger workflow on push and pull request events
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest  # The OS for your GitHub Action runner

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 11 using Eclipse Temurin (successor of AdoptOpenJDK)
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'  # Specify the JDK version you want to use
          distribution: 'temurin'  # Use Eclipse Temurin (successor of AdoptOpenJDK)

      # Step 3: Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository  # Path to the local Maven repository cache
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Install Appium 2.x globally using npm
      - name: Install Appium 2.x
        run: |
          npm install -g appium  # Install Appium 2.x (next version)

      # Step 5: Install Appium mac2 driver via Appium CLI
      - name: Install Appium mac2 driver
        run: |
          appium driver install mac2  # Install the mac2 driver for Appium 2.x

      # Step 6: Start the Appium server in the background
      - name: Start Appium server
        run: |
          nohup appium > appium.log 2>&1 &

      # Step 7: Wait for the Appium server to be ready (optional but recommended)
      - name: Wait for Appium server
        run: |
          sleep 10  # You can adjust the time as per your setup

      # Step 8: Build and test the project using Maven
      - name: Build with Maven
        run: mvn clean install  # You can replace with mvn clean verify or your custom command
        env:
          MAVEN_OPTS: "-Xmx2g"  # Optionally set Java memory options for Maven

      # Step 9: Optionally, upload test results (JUnit or other formats)
      - name: Upload Test Results (JUnit)
        if: always()  # This ensures the step runs even if previous steps fail
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/test-*.xml  # Adjust this path if needed

      # Step 10: Optionally, upload the built artifacts (e.g., .jar files)
      - name: Upload build artifacts
        if: success()  # Only upload if the build is successful
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: target/*.jar  # Adjust to match your output file type (e.g., .jar, .war)
