name: Maven Build and Test

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: macos-15  # Ensure tests run on macOS

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'  # Specify the JDK version
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Install Appium 2.x globally
      - name: Install Appium 2.x
        run: |
          npm install -g appium

      # Step 5: Install Appium mac2 driver
      - name: Install Appium mac2 driver
        run: |
          appium driver install mac2

      # Step 6: Start Appium server
      - name: Start Appium server
        run: |
          nohup appium > appium.log 2>&1 &

      # Step 7: Wait for Appium server to be ready
      - name: Wait for Appium server
        run: |
          sleep 10

      # Step 8: Build with Maven
      - name: Build with Maven
        run: mvn clean install
        env:
          MAVEN_OPTS: "-Xmx2g"

      # Step 9: Upload Test Results (JUnit or other formats)
      - name: Upload Test Results (JUnit)
        if: always()  # Always run even if previous steps fail
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: target/surefire-reports/testng-*.xml  # Adjust path as necessary

      # Step 10: Upload emailable report artifact
      - name: Upload emailable report
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: emailable-report
          path: target/site/emailable-report.html  # Path to the generated emailable report

      # Step 11: Email the emailable report (using a custom script)
      - name: Send email with emailable report
        if: success()  # Only send if previous steps are successful
        run: |
          # Setup mutt or another mail client to send the email
          echo "Sending emailable report..." 
          echo "Subject: Test Results for $GITHUB_REPOSITORY" | mutt -s "Test Results" -a target/site/emailable-report.html -- ${{ secrets.RECIPIENT_EMAIL }}

